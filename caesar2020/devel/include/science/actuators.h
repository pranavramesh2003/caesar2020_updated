// Generated by gencpp from file science/actuators.msg
// DO NOT EDIT!


#ifndef SCIENCE_MESSAGE_ACTUATORS_H
#define SCIENCE_MESSAGE_ACTUATORS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace science
{
template <class ContainerAllocator>
struct actuators_
{
  typedef actuators_<ContainerAllocator> Type;

  actuators_()
    : stepper(0)
    , linac(0)
    , micro(0)
    , rhino(0)
    , lid(0)
    , sht(0)  {
    }
  actuators_(const ContainerAllocator& _alloc)
    : stepper(0)
    , linac(0)
    , micro(0)
    , rhino(0)
    , lid(0)
    , sht(0)  {
  (void)_alloc;
    }



   typedef int16_t _stepper_type;
  _stepper_type stepper;

   typedef int16_t _linac_type;
  _linac_type linac;

   typedef int16_t _micro_type;
  _micro_type micro;

   typedef int16_t _rhino_type;
  _rhino_type rhino;

   typedef int16_t _lid_type;
  _lid_type lid;

   typedef int16_t _sht_type;
  _sht_type sht;





  typedef boost::shared_ptr< ::science::actuators_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::science::actuators_<ContainerAllocator> const> ConstPtr;

}; // struct actuators_

typedef ::science::actuators_<std::allocator<void> > actuators;

typedef boost::shared_ptr< ::science::actuators > actuatorsPtr;
typedef boost::shared_ptr< ::science::actuators const> actuatorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::science::actuators_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::science::actuators_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::science::actuators_<ContainerAllocator1> & lhs, const ::science::actuators_<ContainerAllocator2> & rhs)
{
  return lhs.stepper == rhs.stepper &&
    lhs.linac == rhs.linac &&
    lhs.micro == rhs.micro &&
    lhs.rhino == rhs.rhino &&
    lhs.lid == rhs.lid &&
    lhs.sht == rhs.sht;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::science::actuators_<ContainerAllocator1> & lhs, const ::science::actuators_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace science

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::science::actuators_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::science::actuators_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::science::actuators_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::science::actuators_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::science::actuators_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::science::actuators_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::science::actuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25eb6d63d183ea00408e6fe0331e103a";
  }

  static const char* value(const ::science::actuators_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25eb6d63d183ea00ULL;
  static const uint64_t static_value2 = 0x408e6fe0331e103aULL;
};

template<class ContainerAllocator>
struct DataType< ::science::actuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "science/actuators";
  }

  static const char* value(const ::science::actuators_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::science::actuators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 stepper\n"
"int16 linac\n"
"int16 micro\n"
"int16 rhino\n"
"int16 lid\n"
"int16 sht\n"
;
  }

  static const char* value(const ::science::actuators_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::science::actuators_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stepper);
      stream.next(m.linac);
      stream.next(m.micro);
      stream.next(m.rhino);
      stream.next(m.lid);
      stream.next(m.sht);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actuators_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::science::actuators_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::science::actuators_<ContainerAllocator>& v)
  {
    s << indent << "stepper: ";
    Printer<int16_t>::stream(s, indent + "  ", v.stepper);
    s << indent << "linac: ";
    Printer<int16_t>::stream(s, indent + "  ", v.linac);
    s << indent << "micro: ";
    Printer<int16_t>::stream(s, indent + "  ", v.micro);
    s << indent << "rhino: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rhino);
    s << indent << "lid: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lid);
    s << indent << "sht: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sht);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCIENCE_MESSAGE_ACTUATORS_H
