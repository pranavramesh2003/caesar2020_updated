// Generated by gencpp from file sensors/PanTilt.msg
// DO NOT EDIT!


#ifndef SENSORS_MESSAGE_PANTILT_H
#define SENSORS_MESSAGE_PANTILT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensors
{
template <class ContainerAllocator>
struct PanTilt_
{
  typedef PanTilt_<ContainerAllocator> Type;

  PanTilt_()
    : pan(0.0)
    , tilt(0.0)
    , rel(false)  {
    }
  PanTilt_(const ContainerAllocator& _alloc)
    : pan(0.0)
    , tilt(0.0)
    , rel(false)  {
  (void)_alloc;
    }



   typedef float _pan_type;
  _pan_type pan;

   typedef float _tilt_type;
  _tilt_type tilt;

   typedef uint8_t _rel_type;
  _rel_type rel;





  typedef boost::shared_ptr< ::sensors::PanTilt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensors::PanTilt_<ContainerAllocator> const> ConstPtr;

}; // struct PanTilt_

typedef ::sensors::PanTilt_<std::allocator<void> > PanTilt;

typedef boost::shared_ptr< ::sensors::PanTilt > PanTiltPtr;
typedef boost::shared_ptr< ::sensors::PanTilt const> PanTiltConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensors::PanTilt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensors::PanTilt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensors::PanTilt_<ContainerAllocator1> & lhs, const ::sensors::PanTilt_<ContainerAllocator2> & rhs)
{
  return lhs.pan == rhs.pan &&
    lhs.tilt == rhs.tilt &&
    lhs.rel == rhs.rel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensors::PanTilt_<ContainerAllocator1> & lhs, const ::sensors::PanTilt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensors::PanTilt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors::PanTilt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensors::PanTilt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensors::PanTilt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::PanTilt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::PanTilt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensors::PanTilt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8ce171acfa745a5b6ceb9bc3cf0e1d0";
  }

  static const char* value(const ::sensors::PanTilt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8ce171acfa745a5ULL;
  static const uint64_t static_value2 = 0xb6ceb9bc3cf0e1d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensors::PanTilt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensors/PanTilt";
  }

  static const char* value(const ::sensors::PanTilt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensors::PanTilt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pan\n"
"float32 tilt\n"
"bool rel\n"
;
  }

  static const char* value(const ::sensors::PanTilt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensors::PanTilt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pan);
      stream.next(m.tilt);
      stream.next(m.rel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PanTilt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensors::PanTilt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensors::PanTilt_<ContainerAllocator>& v)
  {
    s << indent << "pan: ";
    Printer<float>::stream(s, indent + "  ", v.pan);
    s << indent << "tilt: ";
    Printer<float>::stream(s, indent + "  ", v.tilt);
    s << indent << "rel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSORS_MESSAGE_PANTILT_H
